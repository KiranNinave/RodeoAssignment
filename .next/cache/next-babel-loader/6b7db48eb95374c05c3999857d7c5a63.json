{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/kiran/Desktop/next/RodeoAssignment/pages/index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { getPopularMoviesApi } from \"../apis/movieApis\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"fetchMovies\", async () => {\n      try {\n        this.setState({\n          loading: true\n        });\n        const {\n          page\n        } = this.state;\n        const response = await getPopularMoviesApi({\n          page\n        });\n        this.setState({\n          movies: [...this.state.movies, ...response.results],\n          hasMore: page <= response.total_pages\n        });\n      } catch (err) {\n        console.log(err);\n      } finally {\n        if (this.isComponentMounted) this.setState({\n          loading: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"loadMore\", async () => {\n      this.setState(prevState => ({\n        page: prevState.page + 1\n      }), async () => await this.fetchMovies());\n    });\n\n    this.state = {\n      hasMore: true,\n      loading: false,\n      page: 1,\n      movies: []\n    };\n    this.isComponentMounted = true;\n  }\n\n  async componentDidMount() {\n    await this.fetchMovies();\n  }\n\n  componentWillUnmount() {\n    this.isComponentMounted = false;\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, __jsx(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"home\"), __jsx(InfiniteScroll, {\n      dataLength: this.state.movies.length //This is important field to render the next data\n      ,\n      next: this.loadMore,\n      hasMore: this.state.hasMore,\n      loader: __jsx(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Loading...\"),\n      endMessage: __jsx(\"p\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, __jsx(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"Yay! You have seen it all\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, this.state.movies.map(movie => __jsx(\"div\", {\n      key: movie.id.toString(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, __jsx(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, movie.title)))));\n  }\n\n}\n\nexport default Index;","map":{"version":3,"sources":["/home/kiran/Desktop/next/RodeoAssignment/pages/index.js"],"names":["React","getPopularMoviesApi","InfiniteScroll","Index","Component","constructor","props","setState","loading","page","state","response","movies","results","hasMore","total_pages","err","console","log","isComponentMounted","prevState","fetchMovies","componentDidMount","componentWillUnmount","render","length","loadMore","textAlign","map","movie","id","toString","title"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,QAAoC,mBAApC;AACA,OAAOC,cAAP,MAA2B,iCAA3B;;AAEA,MAAMC,KAAN,SAAoBH,KAAK,CAACI,SAA1B,CAAoC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,yCAmBL,YAAY;AACxB,UAAI;AACF,aAAKC,QAAL,CAAc;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAd;AACA,cAAM;AAAEC,UAAAA;AAAF,YAAW,KAAKC,KAAtB;AACA,cAAMC,QAAQ,GAAG,MAAMV,mBAAmB,CAAC;AAAEQ,UAAAA;AAAF,SAAD,CAA1C;AACA,aAAKF,QAAL,CAAc;AACZK,UAAAA,MAAM,EAAE,CAAC,GAAG,KAAKF,KAAL,CAAWE,MAAf,EAAuB,GAAGD,QAAQ,CAACE,OAAnC,CADI;AAEZC,UAAAA,OAAO,EAAEL,IAAI,IAAIE,QAAQ,CAACI;AAFd,SAAd;AAID,OARD,CAQE,OAAOC,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,OAVD,SAUU;AACR,YAAI,KAAKG,kBAAT,EAA6B,KAAKZ,QAAL,CAAc;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAd;AAC9B;AACF,KAjCkB;;AAAA,sCAmCR,YAAY;AACrB,WAAKD,QAAL,CACEa,SAAS,KAAK;AACZX,QAAAA,IAAI,EAAEW,SAAS,CAACX,IAAV,GAAiB;AADX,OAAL,CADX,EAIE,YAAY,MAAM,KAAKY,WAAL,EAJpB;AAMD,KA1CkB;;AAEjB,SAAKX,KAAL,GAAa;AACXI,MAAAA,OAAO,EAAE,IADE;AAEXN,MAAAA,OAAO,EAAE,KAFE;AAGXC,MAAAA,IAAI,EAAE,CAHK;AAIXG,MAAAA,MAAM,EAAE;AAJG,KAAb;AAMA,SAAKO,kBAAL,GAA0B,IAA1B;AACD;;AAED,QAAMG,iBAAN,GAA0B;AACxB,UAAM,KAAKD,WAAL,EAAN;AACD;;AAEDE,EAAAA,oBAAoB,GAAG;AACrB,SAAKJ,kBAAL,GAA0B,KAA1B;AACD;;AA2BDK,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE,MAAC,cAAD;AACE,MAAA,UAAU,EAAE,KAAKd,KAAL,CAAWE,MAAX,CAAkBa,MADhC,CACwC;AADxC;AAEE,MAAA,IAAI,EAAE,KAAKC,QAFb;AAGE,MAAA,OAAO,EAAE,KAAKhB,KAAL,CAAWI,OAHtB;AAIE,MAAA,MAAM,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJV;AAKE,MAAA,UAAU,EACR;AAAG,QAAA,KAAK,EAAE;AAAEa,UAAAA,SAAS,EAAE;AAAb,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADF,CANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAWG,KAAKjB,KAAL,CAAWE,MAAX,CAAkBgB,GAAlB,CAAsBC,KAAK,IAC1B;AAAK,MAAA,GAAG,EAAEA,KAAK,CAACC,EAAN,CAASC,QAAT,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,KAAK,CAACG,KAAX,CADF,CADD,CAXH,CAFF,CADF;AAsBD;;AApEiC;;AAuEpC,eAAe7B,KAAf","sourcesContent":["import React from \"react\";\nimport { getPopularMoviesApi } from \"../apis/movieApis\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasMore: true,\n      loading: false,\n      page: 1,\n      movies: []\n    };\n    this.isComponentMounted = true;\n  }\n\n  async componentDidMount() {\n    await this.fetchMovies();\n  }\n\n  componentWillUnmount() {\n    this.isComponentMounted = false;\n  }\n\n  fetchMovies = async () => {\n    try {\n      this.setState({ loading: true });\n      const { page } = this.state;\n      const response = await getPopularMoviesApi({ page });\n      this.setState({\n        movies: [...this.state.movies, ...response.results],\n        hasMore: page <= response.total_pages\n      });\n    } catch (err) {\n      console.log(err);\n    } finally {\n      if (this.isComponentMounted) this.setState({ loading: false });\n    }\n  };\n\n  loadMore = async () => {\n    this.setState(\n      prevState => ({\n        page: prevState.page + 1\n      }),\n      async () => await this.fetchMovies()\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <h2>home</h2>\n        <InfiniteScroll\n          dataLength={this.state.movies.length} //This is important field to render the next data\n          next={this.loadMore}\n          hasMore={this.state.hasMore}\n          loader={<h4>Loading...</h4>}\n          endMessage={\n            <p style={{ textAlign: \"center\" }}>\n              <b>Yay! You have seen it all</b>\n            </p>\n          }\n        >\n          {this.state.movies.map(movie => (\n            <div key={movie.id.toString()}>\n              <h3>{movie.title}</h3>\n            </div>\n          ))}\n        </InfiniteScroll>\n      </div>\n    );\n  }\n}\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}